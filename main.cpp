#include <iostream>
#include <random>
#include "RC4.hpp"

// Функция randomByte() может использоваться для генерации ключей.
// Функция возвращает псевдослучайное число в дипазоне [0, 255].
// В качестве возвращаемого типа используется unsigned short, а
// не unsigned char, потому что в качестве шаблонного параметра
// функции uniform_int_distribution() не может использоваться
// unsigned char.
unsigned short randomByte() {
    // Установка генератора псевдослучайных чисел с зерном из программной энтропии:
    static std::mt19937_64 generator (std::random_device{}());
    // Распределение случайных значений в диапазоне [0,255]:
    return std::uniform_int_distribution<unsigned short>(0,255)(generator);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cout << "В области внешних аргументов должно находиться два пользовательских файла:\n"
                  << "argv[1]: Входной файл шифрования/расшифрования\n"
                  << "argv[2]: Выходной файл шифрования/расшифрования\n";
        return 0;
    }

    // Пример качественного ключа:
    constexpr unsigned short keyLength = 256;
    unsigned char key[keyLength] = {131, 191, 178, 106, 10, 45, 236, 58, 85, 127,
                                    140, 20, 45, 25, 41, 56, 139, 241, 250, 118, 148,
                                    69, 170, 207, 85, 37, 86, 175, 8, 252, 83,
                                    203, 182, 238, 95, 194, 11, 81, 118, 10, 53,
                                    40, 202, 244, 177, 3, 181, 119, 33, 108,
                                    240, 247, 125, 67, 64, 48, 46, 125, 221, 24,
                                    159, 125, 142, 255, 208, 195, 100, 129, 160,
                                    67, 28, 221, 85, 209, 1, 19, 42, 39, 8, 12,
                                    215, 126, 233, 181, 70, 22, 221, 227, 32,
                                    177, 69, 191, 65, 176, 176, 22, 205, 15, 55,
                                    93, 103, 26, 99, 12, 38, 111, 11, 248, 122,
                                    58, 167, 220, 15, 206, 13, 39, 234, 129,
                                    190, 130, 255, 55, 71, 17, 64, 197, 194,
                                    231, 94, 179, 218, 17, 37, 31, 134, 37, 65,
                                    3, 148, 89, 53, 209, 152, 210, 62, 48, 193,
                                    70, 145, 10, 187, 233, 208, 94, 105, 207,
                                    149, 61, 135, 125, 112, 93, 158, 69, 181,
                                    123, 95, 186, 215, 172, 37, 150, 151, 132,
                                    70, 169, 25, 25, 125, 187, 82, 8, 212, 104,
                                    31, 199, 181, 60, 55, 43, 35, 70, 159, 175,
                                    92, 106, 63, 254, 179, 194, 108,
                                    206, 228, 44, 19, 104, 245, 100, 125, 146,
                                    76, 16, 203, 194, 226, 118, 36, 197, 228,
                                    52, 148, 113, 222, 244, 222, 134, 251, 27,
                                    152, 197, 189, 17, 111, 142, 185, 136, 51,
                                    248, 73, 129, 101, 196, 230, 87, 39, 158, 2,
                                    74, 252, 241, 237, 231, 162, 215, 3, 92};
    RC4_cipher RC4;
    if (!RC4.setKey(key, keyLength)) {
        std::cout << "Ошибка установки ключа\n";
        return 0;
    }

    std::cout << "Подтвердите вводом \"yes\" выполнение работы RC4 со:\n"
              << "Входным файлом -  \"" << argv[1] << "\"\n"
              << "Выходным файлом - \"" << argv[2] << "\"\n"
              << "Для отказа от выполнения введите \"no\"\n\n"
              << "Пожалуйста, для работы с шифртекстом используйте только 16-ый редактор\n";
    std::string input;
    if (!(std::cin >> input)) {
        std::cout << "Ошибка ввода\n";
        return 0;
    }
    if (input == "yes")
        if (!RC4.encryptDecrypt(argv[1], argv[2]))
            std::cout << "Ошибка шифрования/расшифрования\n";
        else
            std::cout << "Работа завершена\n";
    else
        if (input == "no")
            return 0;
        else {
            std::cout << "Ошибочный ввод\n";
            return 0;
        }
    return 0;
}
