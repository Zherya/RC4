#include <iostream>
#include <random>
#include "RC4.hpp"

//Функция randomByte() может использоваться для генерации ключей:
short randomByte() {
    //Установка генератора псевдослучайных чисел с зерном из программной энтропии:
    static std::mt19937_64 generator (std::random_device{}());
    //Распределение случайных значений в диапазоне [0,255]:
    return std::uniform_int_distribution<short>(0,255)(generator);
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cout << "В области внешних аргументов должно находиться два пользовательских файла:\n"
                  << "argv[1]: Входной файл шифрования/расшифрования\n"
                  << "argv[2]: Выходной файл шифрования/расшифрования\n";
        return 0;
    }
    constexpr unsigned short keyLength = 256;
    unsigned char keys[keyLength] = {134, 39, 56, 202, 166, 88, 182, 179, 60, 73, 244,
                                     93, 79, 125, 21, 173, 50, 249, 95, 48, 167,
                                     41, 84, 34, 180, 4, 231, 195, 123, 67, 94,
                                     211, 138, 89, 193, 152, 158, 185, 50, 186, 255,
                                     132, 37, 188, 161, 71, 243, 212, 8, 67, 58,
                                     25, 27, 105, 2, 150, 28, 143, 173, 103, 180,
                                     6, 38, 125, 204, 242, 44, 2, 103, 162, 226,
                                     207, 230, 114, 173, 125, 32, 44, 63, 151, 249,
                                     108, 27, 129, 241, 242, 245, 39, 128, 77, 196,
                                     180, 179, 234, 10, 208, 171, 178, 74, 1, 63,
                                     5, 19, 161, 46, 50, 66, 198, 122, 190, 178,
                                     247, 212, 217, 16, 176, 208, 254, 84, 84, 5,
                                     6, 88, 180, 95, 46, 130, 195, 159, 137, 106,
                                     178, 136, 242, 228, 106, 102, 78, 219, 32, 71,
                                     148, 23, 138, 252, 50, 55, 190, 105, 78, 196,
                                     116, 119, 236, 103, 173, 24, 137, 113, 208, 139,
                                     55, 7, 124, 63, 89, 37, 179, 58, 122, 70,
                                     63, 55, 24, 113, 24, 132, 147, 117, 252, 148,
                                     214, 70, 245, 6, 131, 2, 219, 20, 20, 49,
                                     19, 26, 14, 111, 164, 34, 8, 48, 181, 187,
                                     221, 29, 54, 200, 177, 135, 92, 233, 84, 166,
                                     55, 220, 214, 15, 179, 56, 76, 176, 249, 199,
                                     20, 130, 190, 74, 153, 233, 248, 24, 6, 104,
                                     80, 106, 47, 6, 205, 176, 224, 104, 226, 136,
                                     59, 7, 217, 121, 13, 15, 90, 195, 81, 126,
                                     148, 23, 244, 156, 217};
    RC4_cipher RC4;
    if (!RC4.setKey(keys, keyLength)) {
        std::cout << "Ошибка установки ключа\n";
        return 0;
    }

    std::cout << "Для ширования файла из внешних аргументов введите \"enc\";\n"
              << "Для расшифрования - \"dec\".\n";
    bool encrypting;
    std::string input;
    if (!(std::cin >> input)) {
        std::cout << "Ошибка ввода\n";
        return 0;
    }
    if (input == "enc")
        encrypting = true;
    else
        if (input == "dec")
            encrypting = false;
        else {
            std::cout << "Ошибочный ввод\n";
            return 0;
        }
    if (!RC4.encryptDecrypt(argv[1], argv[2], encrypting))
        std::cout << "Ошибка шифрования/расшифрования\n";
    else
        std::cout << "Работа завершена\n";

    return 0;
}